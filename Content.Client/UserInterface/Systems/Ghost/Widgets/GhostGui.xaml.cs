using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;

    //Sich feature respawn
    public bool StartTimer { get => _startTimer; set => _startTimer = value; }
    public float Timer { get => _timer; set => _timer = value; }

    public string StringTimer
    {
        get
        {
            if (Timer >= 60 && Timer < 120)
            {
                return Loc.GetString("ghost-gui-ghost-respawn-button-timer-minutes", ("time", $"{(int) (Timer / 60)}"));
            }
            if (Timer >= 120 && Timer < 3600)
            {
                return Loc.GetString("ghost-gui-ghost-respawn-button-timer-minutes", ("time", $"{(int) (Timer / 60) + 1}"));
            }
            if (Timer >= 3600)
            {
                return Loc.GetString("ghost-gui-ghost-respawn-button-timer-hours", ("time", $"{(int) Timer / 3600}"));
            }
            return Loc.GetString("ghost-gui-ghost-respawn-button-timer-seconds", ("time", $"{Timer:0.0}"));
        }
    }
    private bool _canRespawn = false;
    private float _timer;
    private bool _startTimer = false;

    public event Action? GhostRespawnPressed;
    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();

        GhostRespawnButton.OnPressed += _ =>
        {
            GhostRespawnPressed?.Invoke();
            GhostRespawnButton.Disabled = true;
        };

        if (!_canRespawn)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-ghost-respawn-button-timer-seconds", ("time", $"{_timer:0.0}"));
            GhostRespawnButton.Disabled = true;
        }
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));
            if (roles > 0)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }
            else
            {
                GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);
            }
        }

        TargetWindow.Populate();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (StartTimer)
        {
            if (_timer > 0.0)
            {
                GhostRespawnButton.Disabled = true;
                _timer -= args.DeltaSeconds;
                GhostRespawnButton.Text = StringTimer;
            }
            else
            {
                _canRespawn = true;
                StartTimer = false;
                GhostRespawnButton.Disabled = false;
                GhostRespawnButton.Text = Loc.GetString("ghost-gui-ghost-respawn-button");
            }
        }
    }

}
